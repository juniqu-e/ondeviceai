kotlin version: 2.0.21
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: C:/Users/SSAFY/Desktop/ondevice/app/src/main/java/com/ondevice/ai/TextPlacer.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:65)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:38)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:27)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:14)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:246)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipeline.kt:142)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:148)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:43)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:103)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:49)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:464)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:73)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:675)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1660)
	at jdk.internal.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN name:determineTextStyle visibility:private modality:FINAL <> ($this:com.ondevice.ai.TextPlacer, palette:androidx.palette.graphics.Palette) returnType:com.ondevice.ai.TextPlacer.TextStyle
  $this: VALUE_PARAMETER name:<this> type:com.ondevice.ai.TextPlacer
  VALUE_PARAMETER name:palette index:0 type:androidx.palette.graphics.Palette
  BLOCK_BODY
    VAR name:dominantSwatch type:androidx.palette.graphics.Palette.Swatch? [val]
      CALL 'public open fun getDominantSwatch (): @[EnhancedNullability] androidx.palette.graphics.Palette.Swatch? declared in androidx.palette.graphics.Palette' type=@[EnhancedNullability] androidx.palette.graphics.Palette.Swatch? origin=GET_PROPERTY
        $this: GET_VAR 'palette: androidx.palette.graphics.Palette declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=androidx.palette.graphics.Palette origin=null
    VAR name:isDarkBackground type:kotlin.Boolean [val]
      BLOCK type=kotlin.Boolean origin=FOLDED_ELVIS
        WHEN type=kotlin.Boolean origin=FOLDED_ELVIS
          BRANCH
            if: CALL 'public final fun ANDAND (arg0: kotlin.Boolean, arg1: kotlin.Boolean): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
              arg0: COMPOSITE type=kotlin.Boolean origin=null
                CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                  $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                    arg0: GET_VAR 'val dominantSwatch: androidx.palette.graphics.Palette.Swatch? [val] declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=androidx.palette.graphics.Palette.Swatch? origin=null
                    arg1: CONST Null type=kotlin.Nothing? value=null
              arg1: COMPOSITE type=kotlin.Boolean origin=null
                VAR IR_TEMPORARY_VARIABLE name:tmp1_elvis_lhs type:kotlin.Boolean [val]
                  CALL 'public final fun let <T, R> (block: kotlin.Function1<T of kotlin.StandardKt.let, R of kotlin.StandardKt.let>): R of kotlin.StandardKt.let [inline] declared in kotlin.StandardKt' type=kotlin.Boolean origin=null
                    <T>: androidx.palette.graphics.Palette.Swatch
                    <R>: kotlin.Boolean
                    $receiver: GET_VAR 'val dominantSwatch: androidx.palette.graphics.Palette.Swatch? [val] declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=androidx.palette.graphics.Palette.Swatch? origin=null
                    block: BLOCK type=kotlin.Function1<androidx.palette.graphics.Palette.Swatch, kotlin.Boolean> origin=LAMBDA
                      COMPOSITE type=kotlin.Unit origin=null
                      FUNCTION_REFERENCE 'private final fun determineTextStyle$lambda$0 (swatch: androidx.palette.graphics.Palette.Swatch): kotlin.Boolean declared in com.ondevice.ai.TextPlacer' type=kotlin.Function1<androidx.palette.graphics.Palette.Swatch, kotlin.Boolean> origin=INLINE_LAMBDA reflectionTarget=null
                CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                  $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                    arg0: GET_VAR 'val tmp1_elvis_lhs: kotlin.Boolean [val] declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=kotlin.Boolean origin=null
                    arg1: CONST Null type=kotlin.Nothing? value=null
            then: GET_VAR 'val tmp1_elvis_lhs: kotlin.Boolean [val] declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=kotlin.Boolean origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=true
    VAR name:textColor type:kotlin.Int [val]
      WHEN type=kotlin.Int origin=IF
        BRANCH
          if: GET_VAR 'val isDarkBackground: kotlin.Boolean [val] declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=kotlin.Boolean origin=null
          then: CONST Int type=kotlin.Int value=-1
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: CONST Int type=kotlin.Int value=-16777216
    VAR name:textPaint type:android.graphics.Paint [val]
      CALL 'public final fun apply <T> (block: @[ExtensionFunctionType] kotlin.Function1<T of kotlin.StandardKt.apply, kotlin.Unit>): T of kotlin.StandardKt.apply [inline] declared in kotlin.StandardKt' type=android.graphics.Paint origin=null
        <T>: android.graphics.Paint
        $receiver: CONSTRUCTOR_CALL 'public constructor <init> () declared in android.graphics.Paint' type=android.graphics.Paint origin=null
        block: BLOCK type=@[ExtensionFunctionType] kotlin.Function1<android.graphics.Paint, kotlin.Unit> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun determineTextStyle$lambda$1 ($textColor: kotlin.Int, $palette: androidx.palette.graphics.Palette, $isDarkBackground: kotlin.Boolean): kotlin.Unit declared in com.ondevice.ai.TextPlacer' type=@[ExtensionFunctionType] kotlin.Function1<android.graphics.Paint, kotlin.Unit> origin=INLINE_LAMBDA reflectionTarget=null
            $textColor: GET_VAR 'val textColor: kotlin.Int [val] declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=kotlin.Int origin=null
            $palette: GET_VAR 'palette: androidx.palette.graphics.Palette declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=androidx.palette.graphics.Palette origin=null
            $isDarkBackground: GET_VAR 'val isDarkBackground: kotlin.Boolean [val] declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=kotlin.Boolean origin=null
    RETURN type=kotlin.Nothing from='private final fun determineTextStyle (palette: androidx.palette.graphics.Palette): com.ondevice.ai.TextPlacer.TextStyle declared in com.ondevice.ai.TextPlacer'
      CONSTRUCTOR_CALL 'public constructor <init> (paint: android.graphics.Paint, isDarkBackground: kotlin.Boolean) [primary] declared in com.ondevice.ai.TextPlacer.TextStyle' type=com.ondevice.ai.TextPlacer.TextStyle origin=null
        paint: GET_VAR 'val textPaint: android.graphics.Paint [val] declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=android.graphics.Paint origin=null
        isDarkBackground: GET_VAR 'val isDarkBackground: kotlin.Boolean [val] declared in com.ondevice.ai.TextPlacer.determineTextStyle' type=kotlin.Boolean origin=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:40)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:406)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:423)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:168)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:39)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt.createFilePhase$lambda$4(PhaseFactories.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:69)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:62)
	... 44 more
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN INLINE_LAMBDA name:determineTextStyle$lambda$1 visibility:private modality:FINAL <> ($receiver:android.graphics.Paint, $textColor:kotlin.Int, $palette:androidx.palette.graphics.Palette, $isDarkBackground:kotlin.Boolean) returnType:kotlin.Unit
  $receiver: VALUE_PARAMETER name:$this$apply type:android.graphics.Paint
  VALUE_PARAMETER BOUND_VALUE_PARAMETER name:$textColor index:0 type:kotlin.Int
  VALUE_PARAMETER BOUND_VALUE_PARAMETER name:$palette index:1 type:androidx.palette.graphics.Palette
  VALUE_PARAMETER BOUND_VALUE_PARAMETER name:$isDarkBackground index:2 type:kotlin.Boolean
  BLOCK_BODY
    VAR name:$i$a$-apply-TextPlacer$determineTextStyle$textPaint$1 type:kotlin.Int [val]
      CONST Int type=kotlin.Int value=0
    CALL 'public open fun setColor (p0: kotlin.Int): kotlin.Unit declared in android.graphics.Paint' type=kotlin.Unit origin=EQ
      $this: GET_VAR '$this$apply: android.graphics.Paint declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=android.graphics.Paint origin=null
      p0: GET_VAR '$textColor: kotlin.Int declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=kotlin.Int origin=null
    CALL 'public open fun setAntiAlias (p0: kotlin.Boolean): kotlin.Unit declared in android.graphics.Paint' type=kotlin.Unit origin=EQ
      $this: GET_VAR '$this$apply: android.graphics.Paint declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=android.graphics.Paint origin=null
      p0: CONST Boolean type=kotlin.Boolean value=true
    CALL 'public open fun setTextAlign (p0: @[FlexibleNullability] android.graphics.Paint.Align?): kotlin.Unit declared in android.graphics.Paint' type=kotlin.Unit origin=EQ
      $this: GET_VAR '$this$apply: android.graphics.Paint declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=android.graphics.Paint origin=null
      p0: GET_FIELD 'FIELD FIELD_FOR_ENUM_ENTRY name:CENTER type:android.graphics.Paint.Align visibility:public [final,static] declared in android.graphics.Paint.Align' type=android.graphics.Paint.Align origin=null
    WHEN type=kotlin.Unit origin=IF
      BRANCH
        if: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
          arg0: CALL 'public abstract fun <get-size> (): kotlin.Int [fake_override] declared in kotlin.collections.MutableList' type=kotlin.Int origin=GET_PROPERTY
            $this: CALL 'public open fun getSwatches (): @[EnhancedNullability] @[FlexibleMutability] kotlin.collections.MutableList<@[FlexibleNullability] androidx.palette.graphics.Palette.Swatch?> declared in androidx.palette.graphics.Palette' type=@[EnhancedNullability] @[FlexibleMutability] kotlin.collections.MutableList<@[FlexibleNullability] androidx.palette.graphics.Palette.Swatch?> origin=GET_PROPERTY
              $this: GET_VAR '$palette: androidx.palette.graphics.Palette declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=androidx.palette.graphics.Palette origin=null
          arg1: CONST Int type=kotlin.Int value=3
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public open fun setStyle (p0: @[FlexibleNullability] android.graphics.Paint.Style?): kotlin.Unit declared in android.graphics.Paint' type=kotlin.Unit origin=EQ
            $this: GET_VAR '$this$apply: android.graphics.Paint declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=android.graphics.Paint origin=null
            p0: GET_FIELD 'FIELD FIELD_FOR_ENUM_ENTRY name:FILL_AND_STROKE type:android.graphics.Paint.Style visibility:public [final,static] declared in android.graphics.Paint.Style' type=android.graphics.Paint.Style origin=null
          CALL 'public open fun setStrokeWidth (p0: kotlin.Float): kotlin.Unit declared in android.graphics.Paint' type=kotlin.Unit origin=EQ
            $this: GET_VAR '$this$apply: android.graphics.Paint declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=android.graphics.Paint origin=null
            p0: CONST Float type=kotlin.Float value=2.0
          CALL 'public open fun setStrokeCap (p0: @[FlexibleNullability] android.graphics.Paint.Cap?): kotlin.Unit declared in android.graphics.Paint' type=kotlin.Unit origin=EQ
            $this: GET_VAR '$this$apply: android.graphics.Paint declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=android.graphics.Paint origin=null
            p0: GET_FIELD 'FIELD FIELD_FOR_ENUM_ENTRY name:ROUND type:android.graphics.Paint.Cap visibility:public [final,static] declared in android.graphics.Paint.Cap' type=android.graphics.Paint.Cap origin=null
          CALL 'public open fun setStrokeJoin (p0: @[FlexibleNullability] android.graphics.Paint.Join?): kotlin.Unit declared in android.graphics.Paint' type=kotlin.Unit origin=EQ
            $this: GET_VAR '$this$apply: android.graphics.Paint declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=android.graphics.Paint origin=null
            p0: GET_FIELD 'FIELD FIELD_FOR_ENUM_ENTRY name:ROUND type:android.graphics.Paint.Join visibility:public [final,static] declared in android.graphics.Paint.Join' type=android.graphics.Paint.Join origin=null
          SET_FIELD 'FIELD IR_EXTERNAL_JAVA_DECLARATION_STUB name:strokeColor type:kotlin.Int visibility:public [final,static] declared in android.R.attr' type=kotlin.Unit superQualifierSymbol=android.R.attr origin=EQ
            value: WHEN type=kotlin.Int origin=IF
              BRANCH
                if: GET_VAR '$isDarkBackground: kotlin.Boolean declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=kotlin.Boolean origin=null
                then: CONST Int type=kotlin.Int value=-16777216
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Int type=kotlin.Int value=-1
      BRANCH
        if: CONST Boolean type=kotlin.Boolean value=true
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public open fun setStyle (p0: @[FlexibleNullability] android.graphics.Paint.Style?): kotlin.Unit declared in android.graphics.Paint' type=kotlin.Unit origin=EQ
            $this: GET_VAR '$this$apply: android.graphics.Paint declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=android.graphics.Paint origin=null
            p0: GET_FIELD 'FIELD FIELD_FOR_ENUM_ENTRY name:FILL type:android.graphics.Paint.Style visibility:public [final,static] declared in android.graphics.Paint.Style' type=android.graphics.Paint.Style origin=null
    CALL 'public open fun setTypeface (p0: @[FlexibleNullability] android.graphics.Typeface?): @[FlexibleNullability] android.graphics.Typeface? declared in android.graphics.Paint' type=kotlin.Unit origin=EQ
      $this: GET_VAR '$this$apply: android.graphics.Paint declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=android.graphics.Paint origin=null
      p0: CALL 'public open fun create (p0: @[FlexibleNullability] android.graphics.Typeface?, p1: kotlin.Int): @[FlexibleNullability] android.graphics.Typeface? declared in android.graphics.Typeface' type=@[FlexibleNullability] android.graphics.Typeface? origin=null
        p0: GET_FIELD 'FIELD IR_EXTERNAL_JAVA_DECLARATION_STUB name:DEFAULT type:@[FlexibleNullability] android.graphics.Typeface? visibility:public [final,static] declared in android.graphics.Typeface' type=@[FlexibleNullability] android.graphics.Typeface? superQualifierSymbol=android.graphics.Typeface origin=null
        p1: CONST Int type=kotlin.Int value=1

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline.generateLambdaBody(IrSourceCompilerForInline.kt:67)
	at org.jetbrains.kotlin.codegen.inline.ExpressionLambda.generateLambdaBody(LambdaInfo.kt:72)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen.genValueAndPut(IrInlineCodegen.kt:100)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall$handleParameter(ExpressionCodegen.kt:616)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:644)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrCall.accept(IrCall.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:790)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.declarations.IrVariable.accept(IrVariable.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:579)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:584)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:240)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:123)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:44)
	... 54 more
Caused by: java.lang.AssertionError: access of const val: SET_FIELD 'FIELD IR_EXTERNAL_JAVA_DECLARATION_STUB name:strokeColor type:kotlin.Int visibility:public [final,static] declared in android.R.attr' type=kotlin.Unit superQualifierSymbol=android.R.attr origin=EQ
  value: WHEN type=kotlin.Int origin=IF
    BRANCH
      if: GET_VAR '$isDarkBackground: kotlin.Boolean declared in com.ondevice.ai.TextPlacer.determineTextStyle$lambda$1' type=kotlin.Boolean origin=null
      then: CONST Int type=kotlin.Int value=-16777216
    BRANCH
      if: CONST Boolean type=kotlin.Boolean value=true
      then: CONST Int type=kotlin.Int value=-1

	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitFieldAccess(ExpressionCodegen.kt:861)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitFieldAccess(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitor$DefaultImpls.visitSetField(IrElementVisitor.kt:206)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitSetField(ExpressionCodegen.kt:908)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitSetField(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrSetField.accept(IrSetField.kt:21)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:579)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitContainerExpression(ExpressionCodegen.kt:593)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitContainerExpression(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitor$DefaultImpls.visitBlock(IrElementVisitor.kt:122)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlock(ExpressionCodegen.kt:413)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlock(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrBlock.accept(IrBlock.kt:18)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitWhen(ExpressionCodegen.kt:1101)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitWhen(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrWhen.accept(IrWhen.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:579)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:584)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:240)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:123)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:44)
	... 71 more


